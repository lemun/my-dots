#!/usr/bin/env bash
set -euo pipefail

if [[ $# -lt 1 ]]; then
  echo "Usage: $0 [vscode|cursor] [--prune]"
  exit 1
fi

EDITOR="$1"; shift || true

case "$EDITOR" in
  vscode)
    BIN="code"
    USER_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/Code/User"
    REPO_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)/vscode"
    ;;
  cursor)
    BIN="cursor"
    USER_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/Cursor/User"
    REPO_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)/cursor"
    ;;
  *)
    echo "Unknown editor: $EDITOR (expected vscode or cursor)"
    exit 1
    ;;
esac

mkdir -p "$USER_DIR"

backup_file () {
  local target="$1"
  if [[ -e "$target" && ! -L "$target" ]]; then
    cp -a -- "$target" "$target.bak.$(date +%Y%m%d%H%M%S)"
    echo "Backed up $target -> ${target}.bak.*"
  fi
}

link_it () {
  local src="$1" dst="$2"
  if [[ -e "$src" || -d "$src" ]]; then
    backup_file "$dst"
    rm -rf -- "$dst"
    ln -s -- "$src" "$dst"
    echo "Linked $dst -> $src"
  fi
}

# Link configs
link_it "$REPO_DIR/settings.json"    "$USER_DIR/settings.json"
link_it "$REPO_DIR/keybindings.json" "$USER_DIR/keybindings.json"
link_it "$REPO_DIR/snippets"         "$USER_DIR/snippets"

# Extensions
EXT_FILE="$REPO_DIR/extensions.txt"
if [[ -f "$EXT_FILE" ]]; then
  echo "Installing extensions from $EXT_FILE ..."
  mapfile -t EXT_TARGETS < <(grep -Ev '^\s*($|#)' "$EXT_FILE" || true)
  for ext in "${EXT_TARGETS[@]}"; do
    if [[ "$ext" == *.vsix ]]; then
      "$BIN" --install-extension "$ext" >/dev/null || echo "Failed: $ext" >&2
    else
      "$BIN" --install-extension "$ext" --force >/dev/null || echo "Failed: $ext" >&2
    fi
  done
  echo "Done installing."

  if [[ "${1:-}" == "--prune" ]]; then
    echo "Pruning not-in-list extensions..."
    current=$("$BIN" --list-extensions --show-versions || true)
    wanted=$(printf "%s\n" "${EXT_TARGETS[@]}" | sed 's/@.*$//' | sort -u)
    while read -r inst; do
      name="${inst%@*}"
      if ! grep -qxF "$name" <<< "$wanted"; then
        echo "Uninstalling $name"
        "$BIN" --uninstall-extension "$name" >/dev/null || true
      fi
    done <<< "$current"
    echo "Prune complete."
  fi
else
  echo "No extensions.txt found at $EXT_FILE (skipping installs)."
fi

echo "Finished setting up $EDITOR"
